// up right down left up-right down-right down-left up-left
pub const DIRECTIONS: [i8; 8] = [-8, 1, 8, -1, -7, 9, 7, -9];
pub const EDGE_DISTANCE: [[i8; 8]; 64] = [
    [0, 7, 7, 0, 0, 7, 0, 0],
    [0, 6, 7, 1, 0, 6, 1, 0],
    [0, 5, 7, 2, 0, 5, 2, 0],
    [0, 4, 7, 3, 0, 4, 3, 0],
    [0, 3, 7, 4, 0, 3, 4, 0],
    [0, 2, 7, 5, 0, 2, 5, 0],
    [0, 1, 7, 6, 0, 1, 6, 0],
    [0, 0, 7, 7, 0, 0, 7, 0],
    [1, 7, 6, 0, 1, 6, 0, 0],
    [1, 6, 6, 1, 1, 6, 1, 1],
    [1, 5, 6, 2, 1, 5, 2, 1],
    [1, 4, 6, 3, 1, 4, 3, 1],
    [1, 3, 6, 4, 1, 3, 4, 1],
    [1, 2, 6, 5, 1, 2, 5, 1],
    [1, 1, 6, 6, 1, 1, 6, 1],
    [1, 0, 6, 7, 0, 0, 6, 1],
    [2, 7, 5, 0, 2, 5, 0, 0],
    [2, 6, 5, 1, 2, 5, 1, 1],
    [2, 5, 5, 2, 2, 5, 2, 2],
    [2, 4, 5, 3, 2, 4, 3, 2],
    [2, 3, 5, 4, 2, 3, 4, 2],
    [2, 2, 5, 5, 2, 2, 5, 2],
    [2, 1, 5, 6, 1, 1, 5, 2],
    [2, 0, 5, 7, 0, 0, 5, 2],
    [3, 7, 4, 0, 3, 4, 0, 0],
    [3, 6, 4, 1, 3, 4, 1, 1],
    [3, 5, 4, 2, 3, 4, 2, 2],
    [3, 4, 4, 3, 3, 4, 3, 3],
    [3, 3, 4, 4, 3, 3, 4, 3],
    [3, 2, 4, 5, 2, 2, 4, 3],
    [3, 1, 4, 6, 1, 1, 4, 3],
    [3, 0, 4, 7, 0, 0, 4, 3],
    [4, 7, 3, 0, 4, 3, 0, 0],
    [4, 6, 3, 1, 4, 3, 1, 1],
    [4, 5, 3, 2, 4, 3, 2, 2],
    [4, 4, 3, 3, 4, 3, 3, 3],
    [4, 3, 3, 4, 3, 3, 3, 4],
    [4, 2, 3, 5, 2, 2, 3, 4],
    [4, 1, 3, 6, 1, 1, 3, 4],
    [4, 0, 3, 7, 0, 0, 3, 4],
    [5, 7, 2, 0, 5, 2, 0, 0],
    [5, 6, 2, 1, 5, 2, 1, 1],
    [5, 5, 2, 2, 5, 2, 2, 2],
    [5, 4, 2, 3, 4, 2, 2, 3],
    [5, 3, 2, 4, 3, 2, 2, 4],
    [5, 2, 2, 5, 2, 2, 2, 5],
    [5, 1, 2, 6, 1, 1, 2, 5],
    [5, 0, 2, 7, 0, 0, 2, 5],
    [6, 7, 1, 0, 6, 1, 0, 0],
    [6, 6, 1, 1, 6, 1, 1, 1],
    [6, 5, 1, 2, 5, 1, 1, 2],
    [6, 4, 1, 3, 4, 1, 1, 3],
    [6, 3, 1, 4, 3, 1, 1, 4],
    [6, 2, 1, 5, 2, 1, 1, 5],
    [6, 1, 1, 6, 1, 1, 1, 6],
    [6, 0, 1, 7, 0, 0, 1, 6],
    [7, 7, 0, 0, 7, 0, 0, 0],
    [7, 6, 0, 1, 6, 0, 0, 1],
    [7, 5, 0, 2, 5, 0, 0, 2],
    [7, 4, 0, 3, 4, 0, 0, 3],
    [7, 3, 0, 4, 3, 0, 0, 4],
    [7, 2, 0, 5, 2, 0, 0, 5],
    [7, 1, 0, 6, 1, 0, 0, 6],
    [7, 0, 0, 7, 0, 0, 0, 7],
];

#[test]
fn gen_edge_distances() {
    let mut result = [[0u8; 8]; 64];
    for file in 0..8 {
        for rank in 0..8 {
            let index: usize = rank * 8 + file;
            let up = rank as u8;
            let right = (7 - file) as u8;
            let down = (7 - rank) as u8;
            let left = file as u8;
            result[index] = [up, right, down, left, up.min(right), down.min(right), down.min(left), up.min(left)];
        }
    }
    assert_eq!(3, result[4][1]);
    assert_eq!(7, result[4][2]);
    assert_eq!(0, result[60][2]);
    dbg!(result);
}
